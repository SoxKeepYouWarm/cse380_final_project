


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           output_string
    3 00000000                 EXPORT           read_string
    4 00000000                 EXPORT           display_digit
    5 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    6 00000000                 EXPORT           uart_init
    7 00000000                 EXPORT           write_character
    8 00000000                 EXPORT           read_character
    9 00000000                 EXPORT           clear_display
   10 00000000                 EXPORT           interrupt_init
   11 00000000                 EXPORT           div_and_mod
   12 00000000         
   13 00000000                 EXPORT           newline
   14 00000000                 EXPORT           store_string
   15 00000000         
   16 00000000 40000000 
                       Base    EQU              0x40000000
   17 00000000         
   18 00000000 0A      newline =                "\n"
   19 00000001 00 00 00        ALIGN
   20 00000004         
   21 00000004 20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20    store_string
                               =                "                              
  "
   22 00000024                 ALIGN
   23 00000024         
   24 00000024         digits_SET
   25 00000024 00001F80        DCD              0x00001F80  ; 0
   26 00000028 00000300        DCD              0x00000300  ; 1 
   27 0000002C 00002D80        DCD              0x00002d80  ; 2
   28 00000030 00002780        DCD              0x00002780  ; 3
   29 00000034 00003300        DCD              0x00003300  ; 4
   30 00000038 00003680        DCD              0x00003680  ; 5
   31 0000003C 00003E80        DCD              0x00003e80  ; 6
   32 00000040 00000380        DCD              0x00000380  ; 7
   33 00000044 00003F80        DCD              0x00003f80  ; 8
   34 00000048 00003780        DCD              0x00003780  ; 9
   35 0000004C 00003B80        DCD              0x00003b80  ; A
   36 00000050 00003E00        DCD              0x00003e00  ; b
   37 00000054 00001C80        DCD              0x00001c80  ; C
   38 00000058 00002F00        DCD              0x00002f00  ; d
   39 0000005C 00003C80        DCD              0x00003c80  ; E
   40 00000060 00003880        DCD              0x00003880  ; F
   41 00000064         
   42 00000064                 ALIGN
   43 00000064         
   44 00000064         
   45 00000064         uart_init



ARM Macro Assembler    Page 2 


   46 00000064 E92D4030        STMFD            SP!, {R4 - R5, lr}
   47 00000068 E59F448C        ldr              r4, =0xE000C00C
   48 0000006C E3A05083        MOV              r5, #131
   49 00000070 E5C45000        STRB             r5, [r4]
   50 00000074         
   51 00000074 E59F4484        ldr              r4, =0xE000C000
   52 00000078 E3A05078        MOV              r5, #120
   53 0000007C E5C45000        STRB             r5, [r4]
   54 00000080         
   55 00000080 E59F447C        ldr              r4, =0xE000C004
   56 00000084 E3A05000        MOV              r5, #0
   57 00000088 E5C45000        STRB             r5, [r4]
   58 0000008C         
   59 0000008C E59F4468        ldr              r4, =0xE000C00C
   60 00000090 E3A05003        MOV              r5, #3
   61 00000094 E5C45000        STRB             r5, [r4]
   62 00000098 E8BD4030        LDMFD            SP!, {R4 - R5, lr}
   63 0000009C E12FFF1E        BX               lr
   64 000000A0         
   65 000000A0         
   66 000000A0         interrupt_init
   67 000000A0 E92D5FF0        stmfd            sp!, {r4 - r12, lr}
   68 000000A4         
   69 000000A4 E59F445C        ldr              r4, =0xFFFFF010 ;interrupt enab
                                                            le register (VICInt
                                                            Enable)
   70 000000A8 E5945000        ldr              r5, [r4]
   71 000000AC E3855010        orr              r5, r5, #0x10 ;enable bit 4 for
                                                             timer 0
   72 000000B0         ;orr r5, r5, #0x20  ;enable bit 5 for timer 1
   73 000000B0 E3855040        orr              r5, r5, #0x40 ;enable bit 6 for
                                                             uart0 interrupt
   74 000000B4 E5845000        str              r5, [r4]
   75 000000B8         
   76 000000B8 E59F444C        ldr              r4, =0xFFFFF00C ; intterupt sel
                                                            ect register (VICIn
                                                            tSelect)
   77 000000BC E5945000        ldr              r5, [r4]
   78 000000C0 E3855010        orr              r5, r5, #0x10 ;enable bit 4 for
                                                             timer 0 FIQ
   79 000000C4         ;orr r5, r5, #0x20  ;enable bit 5 for timer 1 FIQ
   80 000000C4 E3855040        orr              r5, r5, #0x40 ;enable bit 6 for
                                                             fast interrupt
   81 000000C8 E5845000        str              r5, [r4]
   82 000000CC         
   83 000000CC E59F443C        ldr              r4, =0xE000401C ;frequency = 14
                                                            745600hz
   84 000000D0 E59F543C        ldr              r5, =0x708000 ; .5 seconds
   85 000000D4 E5845000        str              r5, [r4]    ;stores speed into 
                                                            mr1
   86 000000D8         
   87 000000D8 E59F4438        ldr              r4, =0xE0004014 ;timer 0
   88 000000DC E5945000        ldr              r5, [r4]    ;enable bit 3 to ge
                                                            nerate interrupt on
                                                             mr1 == tc 
   89 000000E0 E3855008        orr              r5, r5, #0x8 ;enable bit 4 to r
                                                            eset tc when mr1 ==
                                                             tc
   90 000000E4 E5845000        str              r5, [r4]



ARM Macro Assembler    Page 3 


   91 000000E8         
   92 000000E8         ;ldr r4, =0xE0008014 ;timer 1
   93 000000E8         ;ldr r5, [r4]   ;enable bit 3 to generate interrupt on m
                       r1 == tc 
   94 000000E8         ;orr r5, r5, #0x18  ;enable bit 4 to reset tc when mr1 =
                       = tc
   95 000000E8         ;str r5, [r4]
   96 000000E8         
   97 000000E8         
   98 000000E8         
   99 000000E8 E59F4414        ldr              r4, =0xE000C004 ;enable uart in
                                                            terrupt read_data_a
                                                            vailable
  100 000000EC E5945000        ldr              r5, [r4]
  101 000000F0 E3855001        orr              r5, r5, #1
  102 000000F4 E5845000        str              r5, [r4]
  103 000000F8         
  104 000000F8 E10F0000        MRS              r0, CPSR    ; Enable FIQ's, Dis
                                                            able IRQ's
  105 000000FC E3C00040        BIC              r0, r0, #0x40
  106 00000100 E3800080        ORR              r0, r0, #0x80
  107 00000104 E121F000        MSR              CPSR_c, r0
  108 00000108         
  109 00000108         
  110 00000108 E8BD5FF0        ldmfd            sp!, {r4 - r12, lr}
  111 0000010C E12FFF1E        bx               lr
  112 00000110         
  113 00000110         directory
  114 00000110 E92D4030        STMFD            SP!, {R4 - R5, lr}
  115 00000114 E59F4400        LDR              r4, =store_string
  116 00000118 E5D40000        LDRB             r0, [r4]
  117 0000011C         
  118 0000011C E3500031        CMP              r0, #49
  119 00000120 1A000000        BNE              first
  120 00000124 EBFFFFFE        BL               display_digit
  121 00000128         
  122 00000128         first
  123 00000128 E3500032        CMP              r0, #50     ;checks to see if r
                                                            0 is 2
  124 0000012C 1A000000        BNE              second
  125 00000130 EB00002F        BL               read_push_btns
  126 00000134         
  127 00000134         second
  128 00000134 E3500033        CMP              r0, #51     ;checks to see if r
                                                            0 is 3
  129 00000138 1A000000        BNE              third
  130 0000013C EB00004F        BL               LEDs
  131 00000140         
  132 00000140         third
  133 00000140 E3500034        CMP              r0, #52     ;checks to see if r
                                                            0 is 4
  134 00000144 1A000000        BNE              fourth
  135 00000148 EB00007A        BL               RBG_LED
  136 0000014C         
  137 0000014C         fourth
  138 0000014C E3500035        CMP              r0, #53
  139 00000150 1AFFFFFF        BNE              endf
  140 00000154         ;BL gain_super_powers
  141 00000154         



ARM Macro Assembler    Page 4 


  142 00000154         endf
  143 00000154 E8BD4030        LDMFD            SP!, {R4 - R5, lr}
  144 00000158 E12FFF1E        BX               LR
  145 0000015C         
  146 0000015C         
  147 0000015C         ;saves string to store_string
  148 0000015C         read_string
  149 0000015C E92D4003        STMFD            SP!, {r0 - r1, lr}
  150 00000160 E59F13B4        LDR              r1, =store_string 
                                                            ;account for prompt
                                                            
  151 00000164         read_string_loop
  152 00000164 EBFFFFFE        bl               read_character ;reads character
                                                            
  153 00000168 E350000D        CMP              r0, #13     ;checks for enter b
                                                            utton
  154 0000016C         
  155 0000016C         ;store and loop if not enter
  156 0000016C 14C10001        strbne           r0, [r1], #1 ;stores the charac
                                                            ter at the address
  157 00000170 1AFFFFFB        bne              read_string_loop
  158 00000174         
  159 00000174         ;must be enter
  160 00000174 E3A00000        MOV              r0, #0      ;puts last characte
                                                            r at address to 0 s
                                                            o easier to find
  161 00000178 E4C10001        strb             r0, [r1], #1 ;stores the 0
  162 0000017C E8BD4003        LDMFD            SP!, {r0 - r1, lr}
  163 00000180 E12FFF1E        bx               lr
  164 00000184         
  165 00000184         
  166 00000184         ;outputs characters from string at r4 untill null termin
                       ation 
  167 00000184         output_string
  168 00000184 E92D5FEF        STMFD            SP!, {R0 - R3, R5 - R12, lr}
  169 00000188         loop
  170 00000188 E4D40001        LDRB             r0, [r4], #1
  171 0000018C EBFFFFFE        BL               write_character
  172 00000190 E3500000        CMP              r0, #0
  173 00000194 1AFFFFFB        BNE              loop        ;output_string
  174 00000198 E8BD5FEF        LDMFD            SP!, {R0 - R3, R5 - R12, lr}
  175 0000019C E12FFF1E        BX               LR
  176 000001A0         
  177 000001A0         
  178 000001A0         ;reads character to r0
  179 000001A0         read_character
  180 000001A0 E92D400E        STMFD            SP!, {R1 - R3, lr} ; Store regi
                                                            ster lr on stack
  181 000001A4         tloop
  182 000001A4 E59F1374        LDR              r1, =0xE000C014
  183 000001A8 E5912000        LDR              r2, [r1]
  184 000001AC E2023001        AND              r3, r2, #1
  185 000001B0 E3530000        CMP              r3, #0
  186 000001B4 0AFFFFFA        BEQ              tloop
  187 000001B8         
  188 000001B8 E59F1340        LDR              r1, =0xE000C000
  189 000001BC E5D10000        LDRB             r0, [r1]
  190 000001C0 EBFFFFFE        BL               write_character
  191 000001C4         



ARM Macro Assembler    Page 5 


  192 000001C4 E8BD400E        LDMFD            SP!, {R1 - R3, lr}
  193 000001C8 E12FFF1E        BX               LR
  194 000001CC         
  195 000001CC         
  196 000001CC         ;prints r0 to display
  197 000001CC         write_character
  198 000001CC E92D400E        STMFD            SP!, {R1 - R3, lr}
  199 000001D0         wloop
  200 000001D0 E59F1348        LDR              r1, =0xE000C014
  201 000001D4 E5912000        LDR              r2, [r1]
  202 000001D8 E2023020        AND              r3, r2, #32
  203 000001DC E3530000        CMP              r3, #0
  204 000001E0 0AFFFFFA        BEQ              wloop
  205 000001E4         
  206 000001E4 E59F1314        LDR              r1, =0xE000C000
  207 000001E8 E5C10000        STRB             r0 , [r1]
  208 000001EC E8BD400E        LDMFD            SP!, {R1 - R3, lr}
  209 000001F0 E12FFF1E        BX               LR
  210 000001F4         
  211 000001F4         
  212 000001F4         read_push_btns
  213 000001F4 E92D5FFE        STMFD            SP!, {R1-R12, lr}
  214 000001F8         
  215 000001F8         stag1
  216 000001F8 E59F4324        LDR              r4, =0xE0028018 ; bit set
  217 000001FC E3A00000        MOV              r0, #0x00000000
  218 00000200 E5840000        STR              r0, [r4]
  219 00000204         
  220 00000204 E59F431C        LDR              r4, =0xE002801C ; bit clear
  221 00000208 E3A0060F        MOV              r0, #0x00F00000
  222 0000020C E5840000        STR              r0, [r4]
  223 00000210         
  224 00000210 E59F4314        LDR              r4, =0xE0028010 ;loads intput r
                                                            egister address
  225 00000214 E5940000        LDR              r0, [r4]    ; reads what was en
                                                            tered 
  226 00000218 E1E02000        mvn              r2, r0
  227 0000021C E202260F        and              r2, r2, #0x00F00000
  228 00000220         ;CMP r0, r2 ; if not changed read again
  229 00000220         
  230 00000220         ;beq tagain1   
  231 00000220 E1A00002        mov              r0, r2
  232 00000224 E1A00A20        lsr              r0, r0, #20
  233 00000228 E1A01000        mov              r1,r0
  234 0000022C E3A08000        MOV              r8, #0
  235 00000230 E2017008        and              r7, r1, #8
  236 00000234 E3570008        CMP              r7, #8
  237 00000238 02888001        addeq            r8, r8, #1
  238 0000023C         
  239 0000023C E2017004        and              r7, r1, #4
  240 00000240 E3570004        CMP              r7, #4
  241 00000244 02888002        addeq            r8, r8, #2
  242 00000248         
  243 00000248 E2017002        and              r7, r1, #2
  244 0000024C E3570002        CMP              r7, #2
  245 00000250 02888004        addeq            r8, r8, #4
  246 00000254         
  247 00000254 E2017001        and              r7, r1, #1
  248 00000258 E3570001        CMP              r7, #1



ARM Macro Assembler    Page 6 


  249 0000025C 02888008        addeq            r8, r8, #8
  250 00000260         
  251 00000260 E2880030        add              r0, r8, #48
  252 00000264 E3500039        cmp              r0, #57
  253 00000268 C2800007        addgt            r0, r0, #7
  254 0000026C         
  255 0000026C EBFFFFFE        BL               write_character ;if there is a 
                                                            bit equal print one
                                                            
  256 00000270 E2800000        add              r0, r0, #0
  257 00000274         
  258 00000274 EAFFFFDF        b                stag1
  259 00000278         
  260 00000278         quit1
  261 00000278 E8BD5FFE        LDMFD            SP!, {R1-R12, lr}
  262 0000027C E12FFF1E        BX               LR
  263 00000280         
  264 00000280         
  265 00000280         
  266 00000280         LEDs
  267 00000280 E92D4193        STMFD            SP!, {r0 - r1, r4, r7 - r8, lr}
  268 00000284         
  269 00000284         stag2
  270 00000284 E59F42A4        LDR              r4,=newline ;add a new line
  271 00000288 EBFFFFFE        BL               output_string
  272 0000028C EBFFFFFE        BL               read_string ;write number   
  273 00000290 E59F4284        LDR              r4, =store_string 
                                                            ;load number   
  274 00000294 E5D40000        LDRB             r0, [r4]
  275 00000298 E3500071        CMP              r0, #0x71   ;check if equal to 
                                                            q   
  276 0000029C 0A000023        BEQ              quit2       ;quit   
  277 000002A0 E3500051        CMP              r0, #0x51   ;check if equal to 
                                                            Q   
  278 000002A4 0A000021        BEQ              quit2       ;quit 
  279 000002A8         led1
  280 000002A8         led2
  281 000002A8 E59F426C        LDR              r4, =store_string ;load value
  282 000002AC E3A01000        mov              r1, #0
  283 000002B0         
  284 000002B0         led3
  285 000002B0 E4D40001        ldrb             r0, [r4],#1
  286 000002B4 E3500000        cmp              r0, #0
  287 000002B8 0A000004        beq              led4
  288 000002BC E3A0700A        mov              r7, #10     ; stores the value 
                                                            ten in a register
  289 000002C0         ;character must be a number
  290 000002C0 E2400030        sub              r0, r0, #48 ; convert to int
  291 000002C4 E0010197        mul              r1, r7, r1  ;multiplies number 
                                                            holder by ten
  292 000002C8 E0811000        add              r1, r1, r0
  293 000002CC EAFFFFF7        b                led3
  294 000002D0         
  295 000002D0         led4
  296 000002D0 E3A08000        MOV              r8, #0
  297 000002D4 E2017008        and              r7, r1, #8
  298 000002D8 E3570008        CMP              r7, #8
  299 000002DC 02888001        addeq            r8, r8, #1
  300 000002E0         



ARM Macro Assembler    Page 7 


  301 000002E0 E2017004        and              r7, r1, #4
  302 000002E4 E3570004        CMP              r7, #4
  303 000002E8 02888002        addeq            r8, r8, #2
  304 000002EC         
  305 000002EC E2017002        and              r7, r1, #2
  306 000002F0 E3570002        CMP              r7, #2
  307 000002F4 02888004        addeq            r8, r8, #4
  308 000002F8         
  309 000002F8 E2017001        and              r7, r1, #1
  310 000002FC E3570001        CMP              r7, #1
  311 00000300 02888008        addeq            r8, r8, #8
  312 00000304         
  313 00000304 E1A01008        MOV              r1, r8
  314 00000308 E1E01801        MVN              r1, r1, LSL #16 ;shifts value t
                                                            o store_string in b
                                                            oard
  315 0000030C         
  316 0000030C E59F4214        LDR              r4, =0xE002801C ;load clear for
                                                             uart
  317 00000310         
  318 00000310 E3A008FF        MOV              r0, #0x00FF0000 ;value to cleas
                                                            
  319 00000314         
  320 00000314 E5840000        STR              r0, [r4]    ;clear
  321 00000318         
  322 00000318 E3A0080F        MOV              r0, #0x000F0000 ;value that you
                                                             write to   
  323 0000031C E59F4200        LDR              r4, =0xE0028018 ;setter to writ
                                                            e(make it an output
                                                            )   
  324 00000320 E5840000        STR              r0, [r4]    ;make output      
  325 00000324 E59F4208        LDR              r4, =0xE0028014 ;load output ua
                                                            rt   
  326 00000328 E5841000        STR              r1, [r4]    ;store value writen
                                                            
  327 0000032C         
  328 0000032C EAFFFFD4        B                stag2       ;go back
  329 00000330         quit2
  330 00000330 E8BD5FFE        LDMFD            SP!, {R1-R12, lr}
  331 00000334 E12FFF1E        BX               LR
  332 00000338         
  333 00000338         
  334 00000338         
  335 00000338         RBG_LED
  336 00000338 E92D5FFE        STMFD            SP!, {R1-R12, lr}
  337 0000033C         
  338 0000033C         stag3
  339 0000033C E59F41EC        LDR              r4, =newline ;newline   
  340 00000340 EBFFFFFE        BL               output_string 
                                                            ;print new line   
  341 00000344 EBFFFFFE        BL               read_string ;write to terminal 
                                                              
  342 00000348 E59F41CC        LDR              r4, =store_string ;read what wa
                                                            s writen   
  343 0000034C E5D40000        LDRB             r0, [r4]    ;load what was writ
                                                            en   
  344 00000350 E3500071        CMP              r0, #0x71   ;checks if q   
  345 00000354 0A000022        BEQ              quit3       ; if q exit  
  346 00000358 E3500051        CMP              r0, #0x51   ;checks if Q   



ARM Macro Assembler    Page 8 


  347 0000035C 0A000020        BEQ              quit3       ; if Q exit   
  348 00000360         
  349 00000360 E59F41D0        LDR              r4, =0xE0028008 ;load what depe
                                                            nds to write or rea
                                                            d   
  350 00000364 E3A01826        MOV              r1, #0x00260000 ;load value to 
                                                            clear/whats writen 
                                                            to   
  351 00000368 E5841000        STR              r1, [r4]    ;clear original   
  352 0000036C E59F41C8        LDR              r4, =0xE002800C ;load clear  
  353 00000370 E5841000        STR              r1, [r4]    ;store to write to 
                                                            uart   
  354 00000374 E59F41A0        LDR              r4, =store_string ;load what wa
                                                            s writen   
  355 00000378 E5D40000        LDRB             r0, [r4]    ;store in r0 
  356 0000037C E59F41BC        LDR              r4, =0xE0028004 ;load where to 
                                                            write in uart
  357 00000380         
  358 00000380 E3500077        CMP              r0, #119    ; w in Ascii  
  359 00000384 1A000001        BNE              nwhite      ;if not white   
  360 00000388 E3A01000        MOV              r1, #0x00000000 ;white   
  361 0000038C E5841000        STR              r1, [r4]    ;print white
  362 00000390         
  363 00000390         nwhite
  364 00000390 E3500079        CMP              r0, #121    ;y in Ascii   
  365 00000394 1A000001        BNE              nyellow     ; if not yellow   
  366 00000398 E3A01701        MOV              r1, #0x00040000 ;yellow   
  367 0000039C E5841000        STR              r1, [r4]    ;print yellow
  368 000003A0         
  369 000003A0         nyellow
  370 000003A0 E3500070        CMP              r0, #112    ;p in Ascii   
  371 000003A4 1A000001        BNE              npurple     ; if not purple   
  372 000003A8 E3A01602        MOV              r1, #0x00200000 ;purple
  373 000003AC E5841000        STR              r1, [r4]    ;print purple
  374 000003B0         
  375 000003B0         npurple
  376 000003B0 E3500062        CMP              r0, #98     ;b in Ascii   
  377 000003B4 1A000001        BNE              nblue       ; if not blue   
  378 000003B8 E3A01822        MOV              r1, #0x00220000 ;blue   
  379 000003BC E5841000        STR              r1, [r4]    ;print blue
  380 000003C0         
  381 000003C0         nblue
  382 000003C0 E3500067        CMP              r0, #103    ;g in Ascii 
  383 000003C4 1A000001        BNE              ngreen      ;if not green
  384 000003C8 E3A01806        MOV              r1, #0x00060000 ;green
  385 000003CC E5841000        STR              r1, [r4]    ;print green
  386 000003D0         
  387 000003D0         ngreen
  388 000003D0 E3500072        CMP              r0, #114    ;r in Ascii   
  389 000003D4 1AFFFFD8        BNE              stag3       ;go to the begining
                                                               
  390 000003D8 E3A01709        MOV              r1, #0x00240000 ;red   
  391 000003DC E5841000        STR              r1, [r4]    ;print red   
  392 000003E0 EAFFFFD5        B                stag3       ;go again
  393 000003E4         
  394 000003E4         quit3
  395 000003E4 E8BD5FFE        LDMFD            SP!, {R1-R12, lr}
  396 000003E8 E12FFF1E        BX               LR
  397 000003EC         



ARM Macro Assembler    Page 9 


  398 000003EC         
  399 000003EC         clear_display
  400 000003EC E92D5BFF        STMFD            SP!, {R0 - R9, r11, r12, lr}
  401 000003F0 E59F4140        LDR              r4, =0xE0028008
  402 000003F4 E3A01DFE        MOV              r1, #0x00003f80 ;load value to 
                                                            clear/whats writen 
                                                            to
  403 000003F8 E5841000        STR              r1, [r4]    ;clear original 
  404 000003FC E59F4138        LDR              r4, =0xE002800C ;load clear
  405 00000400 E5841000        STR              r1, [r4]    ;
  406 00000404 E8BD5BFF        LDMFD            SP!, {R0 - R9, r11, r12, lr}
  407 00000408 E12FFF1E        BX               LR
  408 0000040C         
  409 0000040C         
  410 0000040C         display_digit
  411 0000040C E92D5BFE        STMFD            SP!, {R1-R9, r11, r12, lr}
  412 00000410         
  413 00000410 E59F412C        ldr              r4, =0xE0028000 ; base address
  414 00000414         
  415 00000414 E3A01DFE        MOV              r1, #0x00003f80 ;load value to 
                                                            clear/whats writen 
                                                            to
  416 00000418 E584100C        STR              r1, [r4, #0xC] ; IOCLR
  417 0000041C         
  418 0000041C E59F3124        LDR              r3, =digits_SET
  419 00000420 E1A00100        MOV              r0, r0, LSL #2 ; multiply by 4
  420 00000424 E7932000        LDR              r2, [r3, r0]
  421 00000428 E5842004        STR              r2, [r4, #4] ; store to IOSET
  422 0000042C         
  423 0000042C E8BD401E        LDMFD            SP!, {r1 - r4, lr}
  424 00000430 E12FFF1E        BX               LR
  425 00000434         
  426 00000434         ; pass dividend and divisor into r0, and r1.  
  427 00000434         ; get quotient and remainder in r0, r1.
  428 00000434         div_and_mod
  429 00000434 E92D40FC        STMFD            sp!, {r2-r7, lr}
  430 00000438         main
  431 00000438 EB000015        bl               handle_sign
  432 0000043C E3A02000        mov              r2, #0      ;initialize quotien
                                                            t to 0
  433 00000440 E1A03000        mov              r3, r0      ;initialize remaind
                                                            er to dividend
  434 00000444 E3A04010        mov              r4, #16     ;initialize counter
                                                             to 16
  435 00000448 E1A01801        lsl              r1, #16     ;logical shift left
                                                             divisor 16 places
  436 0000044C E2844001        add              r4, r4, #1  ;offset addition fo
                                                            r loop subtraction
  437 00000450         
  438 00000450         main_loop
  439 00000450 E2444001        sub              r4, r4, #1
  440 00000454 E0433001        sub              r3, r3, r1  ;remainder = remain
                                                            der - divisor
  441 00000458 E3530000        cmp              r3, #0      ; is remainder < 0?
                                                            
  442 0000045C BA000002        blt              remainder_less_than_zero
  443 00000460 E1A02082        lsl              r2, #1      ;left shift quotien
                                                            t
  444 00000464 E2822001        add              r2, r2, #1  ;lsb should be 1



ARM Macro Assembler    Page 10 


  445 00000468 EA000001        b                remainder_less_than_zero_branch
_merged
  446 0000046C         
  447 0000046C         remainder_less_than_zero
  448 0000046C E0833001        add              r3, r3, r1  ;remainder = remain
                                                            der + divisor
  449 00000470 E1A02082        lsl              r2, #1      ;left shift quotien
                                                            t, lsb = 0
  450 00000474         
  451 00000474         remainder_less_than_zero_branch_merged
  452 00000474 E1A010A1        lsr              r1, #1      ;shift right diviso
                                                            r
  453 00000478 E3540000        cmp              r4, #0      ;is counter > 0?
  454 0000047C CAFFFFF3        bgt              main_loop
  455 00000480         ;quotient and remainder are now known, time to check the
                        sign flag
  456 00000480 E3570000        cmp              r7, #0
  457 00000484 0A000001        beq              flag_not_set
  458 00000488 E2622000        neg              r2, r2      ;negate quotient
  459 0000048C E2633000        neg              r3, r3      ;negate remainder
  460 00000490         flag_not_set
  461 00000490 EA00000D        b                end_program
  462 00000494         
  463 00000494         handle_sign
  464 00000494 E3A07000        mov              r7, #0      ;initialize sign fl
                                                            ag to 0
  465 00000498 E3500000        cmp              r0, #0      ;check dividend sig
                                                            n
  466 0000049C CA000001        bgt              check_divisor
  467 000004A0 E3A07001        mov              r7, #1      ;increment sign fla
                                                            g if negative
  468 000004A4 E2600000        neg              r0, r0      ;negate dividend to
                                                             positive
  469 000004A8         check_divisor
  470 000004A8 E3510000        cmp              r1, #0      ;check divisor sign
                                                            
  471 000004AC CA000005        bgt              handle_sign_finished
  472 000004B0 E2611000        neg              r1, r1      ;negate divisor to 
                                                            positive
  473 000004B4 E3570000        cmp              r7, #0      ;check if sign flag
                                                             already set
  474 000004B8 CA000001        bgt              sign_reset
  475 000004BC E3A07001        mov              r7, #1      ;sign set
  476 000004C0 EA000000        b                handle_sign_finished
  477 000004C4         sign_reset
  478 000004C4 E3A07000        mov              r7, #0      ;sign reset
  479 000004C8         handle_sign_finished
  480 000004C8 E12FFF1E        bx               lr
  481 000004CC         end_program
  482 000004CC E1A00002        mov              r0, r2      ;move the quotient 
                                                            to return register
  483 000004D0 E1A01003        mov              r1, r3      ;move the remainder
                                                             to return register
                                                            
  484 000004D4 E8BD40FC        ldmfd            sp!, {r2 - r7, lr}
  485 000004D8 E12FFF1E        bx               lr          ; Return to the C p
                                                            rogram
  486 000004DC         
  487 000004DC         



ARM Macro Assembler    Page 11 


  488 000004DC         pin_connect_block_setup_for_uart0
  489 000004DC E92D4003        STMFD            sp!, {r0, r1, lr}
  490 000004E0 E59F0064        LDR              r0, =0xE002C000 ; PINSEL0
  491 000004E4 E5901000        LDR              r1, [r0]
  492 000004E8 E3811005        ORR              r1, r1, #5
  493 000004EC E3C1100A        BIC              r1, r1, #0xA
  494 000004F0 E5801000        STR              r1, [r0]
  495 000004F4 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  496 000004F8 E12FFF1E        BX               lr
  497 000004FC         
  498 000004FC                 END
              E000C00C 
              E000C000 
              E000C004 
              FFFFF010 
              FFFFF00C 
              E000401C 
              00708000 
              E0004014 
              00000000 
              E000C014 
              E0028018 
              E002801C 
              E0028010 
              00000000 
              E0028014 
              E0028008 
              E002800C 
              E0028004 
              E0028000 
              00000000 
              E002C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library.d -o.\objects\library.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\A
RM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 514" --list=.\listings\library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LEDs 00000280

Symbol: LEDs
   Definitions
      At line 266 in file library.s
   Uses
      At line 130 in file library.s
Comment: LEDs used once
RBG_LED 00000338

Symbol: RBG_LED
   Definitions
      At line 335 in file library.s
   Uses
      At line 135 in file library.s
Comment: RBG_LED used once
check_divisor 000004A8

Symbol: check_divisor
   Definitions
      At line 469 in file library.s
   Uses
      At line 466 in file library.s
Comment: check_divisor used once
clear_display 000003EC

Symbol: clear_display
   Definitions
      At line 399 in file library.s
   Uses
      At line 9 in file library.s
Comment: clear_display used once
digits_SET 00000024

Symbol: digits_SET
   Definitions
      At line 24 in file library.s
   Uses
      At line 418 in file library.s
Comment: digits_SET used once
directory 00000110

Symbol: directory
   Definitions
      At line 113 in file library.s
   Uses
      None
Comment: directory unused
display_digit 0000040C

Symbol: display_digit
   Definitions
      At line 410 in file library.s
   Uses
      At line 4 in file library.s
      At line 120 in file library.s

div_and_mod 00000434




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: div_and_mod
   Definitions
      At line 428 in file library.s
   Uses
      At line 11 in file library.s
Comment: div_and_mod used once
end_program 000004CC

Symbol: end_program
   Definitions
      At line 481 in file library.s
   Uses
      At line 461 in file library.s
Comment: end_program used once
endf 00000154

Symbol: endf
   Definitions
      At line 142 in file library.s
   Uses
      At line 139 in file library.s
Comment: endf used once
first 00000128

Symbol: first
   Definitions
      At line 122 in file library.s
   Uses
      At line 119 in file library.s
Comment: first used once
flag_not_set 00000490

Symbol: flag_not_set
   Definitions
      At line 460 in file library.s
   Uses
      At line 457 in file library.s
Comment: flag_not_set used once
fourth 0000014C

Symbol: fourth
   Definitions
      At line 137 in file library.s
   Uses
      At line 134 in file library.s
Comment: fourth used once
handle_sign 00000494

Symbol: handle_sign
   Definitions
      At line 463 in file library.s
   Uses
      At line 431 in file library.s
Comment: handle_sign used once
handle_sign_finished 000004C8

Symbol: handle_sign_finished
   Definitions
      At line 479 in file library.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 471 in file library.s
      At line 476 in file library.s

interrupt_init 000000A0

Symbol: interrupt_init
   Definitions
      At line 66 in file library.s
   Uses
      At line 10 in file library.s
Comment: interrupt_init used once
led1 000002A8

Symbol: led1
   Definitions
      At line 279 in file library.s
   Uses
      None
Comment: led1 unused
led2 000002A8

Symbol: led2
   Definitions
      At line 280 in file library.s
   Uses
      None
Comment: led2 unused
led3 000002B0

Symbol: led3
   Definitions
      At line 284 in file library.s
   Uses
      At line 293 in file library.s
Comment: led3 used once
led4 000002D0

Symbol: led4
   Definitions
      At line 295 in file library.s
   Uses
      At line 287 in file library.s
Comment: led4 used once
lib 00000000

Symbol: lib
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: lib unused
loop 00000188

Symbol: loop
   Definitions
      At line 169 in file library.s
   Uses
      At line 173 in file library.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: loop used once
main 00000438

Symbol: main
   Definitions
      At line 430 in file library.s
   Uses
      None
Comment: main unused
main_loop 00000450

Symbol: main_loop
   Definitions
      At line 438 in file library.s
   Uses
      At line 454 in file library.s
Comment: main_loop used once
nblue 000003C0

Symbol: nblue
   Definitions
      At line 381 in file library.s
   Uses
      At line 377 in file library.s
Comment: nblue used once
newline 00000000

Symbol: newline
   Definitions
      At line 18 in file library.s
   Uses
      At line 13 in file library.s
      At line 270 in file library.s
      At line 339 in file library.s

ngreen 000003D0

Symbol: ngreen
   Definitions
      At line 387 in file library.s
   Uses
      At line 383 in file library.s
Comment: ngreen used once
npurple 000003B0

Symbol: npurple
   Definitions
      At line 375 in file library.s
   Uses
      At line 371 in file library.s
Comment: npurple used once
nwhite 00000390

Symbol: nwhite
   Definitions
      At line 363 in file library.s
   Uses
      At line 359 in file library.s
Comment: nwhite used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

nyellow 000003A0

Symbol: nyellow
   Definitions
      At line 369 in file library.s
   Uses
      At line 365 in file library.s
Comment: nyellow used once
output_string 00000184

Symbol: output_string
   Definitions
      At line 167 in file library.s
   Uses
      At line 2 in file library.s
      At line 271 in file library.s
      At line 340 in file library.s

pin_connect_block_setup_for_uart0 000004DC

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 488 in file library.s
   Uses
      At line 5 in file library.s
Comment: pin_connect_block_setup_for_uart0 used once
quit1 00000278

Symbol: quit1
   Definitions
      At line 260 in file library.s
   Uses
      None
Comment: quit1 unused
quit2 00000330

Symbol: quit2
   Definitions
      At line 329 in file library.s
   Uses
      At line 276 in file library.s
      At line 278 in file library.s

quit3 000003E4

Symbol: quit3
   Definitions
      At line 394 in file library.s
   Uses
      At line 345 in file library.s
      At line 347 in file library.s

read_character 000001A0

Symbol: read_character
   Definitions
      At line 179 in file library.s
   Uses
      At line 8 in file library.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 152 in file library.s

read_push_btns 000001F4

Symbol: read_push_btns
   Definitions
      At line 212 in file library.s
   Uses
      At line 125 in file library.s
Comment: read_push_btns used once
read_string 0000015C

Symbol: read_string
   Definitions
      At line 148 in file library.s
   Uses
      At line 3 in file library.s
      At line 272 in file library.s
      At line 341 in file library.s

read_string_loop 00000164

Symbol: read_string_loop
   Definitions
      At line 151 in file library.s
   Uses
      At line 157 in file library.s
Comment: read_string_loop used once
remainder_less_than_zero 0000046C

Symbol: remainder_less_than_zero
   Definitions
      At line 447 in file library.s
   Uses
      At line 442 in file library.s
Comment: remainder_less_than_zero used once
remainder_less_than_zero_branch_merged 00000474

Symbol: remainder_less_than_zero_branch_merged
   Definitions
      At line 451 in file library.s
   Uses
      At line 445 in file library.s
Comment: remainder_less_than_zero_branch_merged used once
second 00000134

Symbol: second
   Definitions
      At line 127 in file library.s
   Uses
      At line 124 in file library.s
Comment: second used once
sign_reset 000004C4

Symbol: sign_reset
   Definitions
      At line 477 in file library.s
   Uses
      At line 474 in file library.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: sign_reset used once
stag1 000001F8

Symbol: stag1
   Definitions
      At line 215 in file library.s
   Uses
      At line 258 in file library.s
Comment: stag1 used once
stag2 00000284

Symbol: stag2
   Definitions
      At line 269 in file library.s
   Uses
      At line 328 in file library.s
Comment: stag2 used once
stag3 0000033C

Symbol: stag3
   Definitions
      At line 338 in file library.s
   Uses
      At line 389 in file library.s
      At line 392 in file library.s

store_string 00000004

Symbol: store_string
   Definitions
      At line 21 in file library.s
   Uses
      At line 14 in file library.s
      At line 115 in file library.s
      At line 150 in file library.s
      At line 273 in file library.s
      At line 281 in file library.s
      At line 342 in file library.s
      At line 354 in file library.s

third 00000140

Symbol: third
   Definitions
      At line 132 in file library.s
   Uses
      At line 129 in file library.s
Comment: third used once
tloop 000001A4

Symbol: tloop
   Definitions
      At line 181 in file library.s
   Uses
      At line 186 in file library.s
Comment: tloop used once
uart_init 00000064

Symbol: uart_init



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 45 in file library.s
   Uses
      At line 6 in file library.s
Comment: uart_init used once
wloop 000001D0

Symbol: wloop
   Definitions
      At line 199 in file library.s
   Uses
      At line 204 in file library.s
Comment: wloop used once
write_character 000001CC

Symbol: write_character
   Definitions
      At line 197 in file library.s
   Uses
      At line 7 in file library.s
      At line 171 in file library.s
      At line 190 in file library.s
      At line 255 in file library.s

52 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Base 40000000

Symbol: Base
   Definitions
      At line 16 in file library.s
   Uses
      None
Comment: Base unused
1 symbol
387 symbols in table
